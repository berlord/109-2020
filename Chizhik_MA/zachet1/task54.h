/*
 * Обращение слова
 *
 * Параметры:
 * word: строка, которую нужно обратить
 *
 * Функция получает на вход строку word и строит строку, полученную из word записыванием символов
 * в обратном порядке.
 *
 * Возвращаемое значение:
 * Указатель на новое слово.
 *
 */

char *inverse(char *word);

/*
 * Преобразование строки матрицы в строчку (массив символов)
 *
 * Параметры:
 * row: указатель на строку
 * len: длина строки
 *
 * Функция принимает на вход строку row и ее длину и соединяет все элементы в одно слово.
 *
 * Возвращаемое значение:
 * Указатель на созданную строчку
 *
 */

char *row_to_string(char **row, int len);

/*
 * Нахождение строки по правилу 5
 *
 * Параметры:
 * matrix: матрица из строк
 * m: число строк
 * n: число столбцов
 *
 * Функция находит первую удовлетворяющую условию 5 строчку матрицы и возвращает ее индекс.
 *
 * Возвращаемое значение:
 * Индекс найденной строчки. Если соответствующей строки не нашлось, возвращается -1.
 *
 */

int find_row(char **matrix, int m, int n); 

/*
 * Добавление одной строки к другой по правилу 4
 *
 * Параметры:
 * matrix: матрица из строк
 * n: длина одной строки матрицы
 * k: индекс прибавляемой строки
 * p: индекс изменяемой строки
 *
 * Функция прибавляет строку k к строке p (поэлементно) согласно правилу 4. 
 * Предполагается, что индексы соответствуют длине матрицы и не выходят за ее пределы.
 *
 */

void add_row(char **row, int n, int k, int p);

/*
 * Освобождение ресурсов, выделенных под "одномерную" матрицу
 *
 * Параметры:
 * matrix: матрица
 * m: число строк матрицы
 * n: число столбцов матрицы
 *
 * Функция освобождает ресурсы, выделенные под одномерную матрицу m*n.
 *
 */

void free_1d_matrix(char **matrix, int m, int n);
